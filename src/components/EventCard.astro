---
export interface Props {
  title: string;
  date: Date;
  type: string;
  description: string;
  status: 'upcoming' | 'ongoing' | 'completed';
  games?: string[];
  participants?: number;
  placement?: number;
  notes?: string;
  url?: string;
}

const { 
  title, 
  date, 
  type, 
  description, 
  status, 
  games = [], 
  participants, 
  placement, 
  notes, 
  url 
} = Astro.props;

// Status-based styling
const statusStyles = {
  upcoming: {
    bg: 'bg-blue-50',
    border: 'border-blue-200',
    text: 'text-blue-800',
    badge: 'bg-blue-100 text-blue-800',
    icon: 'text-blue-500'
  },
  ongoing: {
    bg: 'bg-green-50',
    border: 'border-green-200',
    text: 'text-green-800',
    badge: 'bg-green-100 text-green-800',
    icon: 'text-green-500'
  },
  completed: {
    bg: 'bg-gray-50',
    border: 'border-gray-200',
    text: 'text-gray-800',
    badge: 'bg-gray-100 text-gray-800',
    icon: 'text-gray-500'
  }
};

const currentStyles = statusStyles[status];

// Format date
const formatDate = (date: Date): string => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Get status icon
const getStatusIcon = (status: string): string => {
  switch (status) {
    case 'upcoming':
      return 'M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z';
    case 'ongoing':
      return 'M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z';
    case 'completed':
      return 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z';
    default:
      return 'M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z';
  }
};

const statusIcon = getStatusIcon(status);
---

<div class={`bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden border-l-4 ${currentStyles.border}`}>
  <!-- Event Header -->
  <div class="p-6">
    <div class="flex items-start justify-between mb-4">
      <div class="flex-1">
        <div class="flex items-center space-x-3 mb-2">
          <svg class={`w-5 h-5 ${currentStyles.icon}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={statusIcon}/>
          </svg>
          <span class={`px-3 py-1 rounded-full text-xs font-medium ${currentStyles.badge}`}>
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </span>
          <span class="text-sm text-gray-500">{type}</span>
        </div>
        
        <h3 class="text-xl font-bold text-gray-900 mb-2">{title}</h3>
        <p class="text-gray-600 text-sm mb-3">{description}</p>
      </div>
      
      {placement && (
        <div class="ml-4 text-center">
          <div class="text-2xl font-bold text-blue-600">#{placement}</div>
          <div class="text-xs text-gray-500">placement</div>
        </div>
      )}
    </div>

    <!-- Event Details -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
      <div class="flex items-center space-x-2 text-sm text-gray-600">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
        </svg>
        <span>{formatDate(date)}</span>
      </div>
      
      {participants && (
        <div class="flex items-center space-x-2 text-sm text-gray-600">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
          </svg>
          <span>{participants} participants</span>
        </div>
      )}
    </div>

    <!-- Games List -->
    {games.length > 0 && (
      <div class="mb-4">
        <h4 class="text-sm font-medium text-gray-700 mb-2">Featured Games:</h4>
        <div class="flex flex-wrap gap-2">
          {games.map((game) => (
            <span class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-xs">
              {game}
            </span>
          ))}
        </div>
      </div>
    )}

    <!-- Notes -->
    {notes && (
      <div class="mb-4">
        <p class="text-sm text-gray-600 italic">{notes}</p>
      </div>
    )}

    <!-- Action Button -->
    {url && (
      <div class="pt-4 border-t border-gray-100">
        <a 
          href={url} 
          target="_blank"
          class={`inline-flex items-center text-sm font-medium ${currentStyles.text} hover:underline`}
        >
          <span>Learn More</span>
          <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
          </svg>
        </a>
      </div>
    )}
  </div>

  <!-- Status Indicator Bar -->
  <div class={`h-1 ${currentStyles.bg}`}></div>
</div>